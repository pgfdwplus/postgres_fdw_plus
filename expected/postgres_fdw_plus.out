-- ===================================================================
-- Global settings
-- ===================================================================
-- Don't display CONTEXT fields in messages from the server,
-- to make the tests stable.
\set SHOW_CONTEXT never
-- Don't drop remote connections after every transaction,
-- to make the tests stable.
SET debug_discard_caches = 0;
-- ===================================================================
-- Drop previously-created FDW objects that may have unexpected effect
-- on this test, to make the tests stable
-- ===================================================================
SET client_min_messages TO 'error';
DROP EXTENSION IF EXISTS postgres_fdw_plus CASCADE;
RESET client_min_messages;
-- ===================================================================
-- Create database users
-- ===================================================================
CREATE ROLE regress_pgfdw_local_super1 SUPERUSER;
CREATE ROLE regress_pgfdw_local_super2 SUPERUSER;
CREATE ROLE regress_pgfdw_remote_super1 SUPERUSER LOGIN;
CREATE ROLE regress_pgfdw_remote_super2 SUPERUSER LOGIN;
SET ROLE regress_pgfdw_local_super1;
-- ===================================================================
-- Create FDW objects
-- ===================================================================
CREATE EXTENSION postgres_fdw_plus;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER pgfdw_plus_loopback1
            FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$',
                     application_name 'pgfdw_plus_loopback1'
            )$$;
        EXECUTE $$CREATE SERVER pgfdw_plus_loopback2
            FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (dbname '$$||current_database()||$$',
                     port '$$||current_setting('port')||$$',
                     application_name 'pgfdw_plus_loopback2',
                     parallel_commit 'on'
            )$$;
    END;
$d$;
CREATE USER MAPPING FOR PUBLIC SERVER pgfdw_plus_loopback1
  OPTIONS (user 'regress_pgfdw_remote_super1');
CREATE USER MAPPING FOR CURRENT_USER SERVER pgfdw_plus_loopback2
  OPTIONS (user 'regress_pgfdw_remote_super2');
-- Create dummy foreign data wrapper, server and user mapping
-- to test the error cases.
CREATE FOREIGN DATA WRAPPER pgfdw_plus_dummy;
CREATE SERVER pgfdw_plus_dummy_server FOREIGN DATA WRAPPER pgfdw_plus_dummy;
CREATE USER MAPPING FOR PUBLIC SERVER pgfdw_plus_dummy_server;
-- ===================================================================
-- Create objects used by local transaction or through FDW
-- pgfdw_plus_loopback1 and pgfdw_plus_loopback2 servers
-- ===================================================================
CREATE SCHEMA regress_pgfdw_plus;
SET search_path TO regress_pgfdw_plus, "$user", public;
CREATE TABLE t0 (c1 int PRIMARY KEY);
CREATE TABLE t1 (c1 int PRIMARY KEY);
CREATE TABLE t2 (c1 int PRIMARY KEY);
-- Disable autovacuum for these tables to avoid unexpected effects of that.
ALTER TABLE t0 SET (autovacuum_enabled = 'false');
ALTER TABLE t1 SET (autovacuum_enabled = 'false');
ALTER TABLE t2 SET (autovacuum_enabled = 'false');
-- ===================================================================
-- Create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (c1 int) SERVER pgfdw_plus_loopback1
    OPTIONS (schema_name 'regress_pgfdw_plus', table_name 't1');
CREATE FOREIGN TABLE ft2 (c1 int) SERVER pgfdw_plus_loopback2
    OPTIONS (schema_name 'regress_pgfdw_plus', table_name 't2');
CREATE VIEW ftv AS SELECT * FROM t0 UNION ALL
  SELECT * FROM ft1 UNION ALL SELECT * FROM ft2;
-- ===================================================================
-- Test postgres_fdw.use_read_committed
-- ===================================================================
SET postgres_fdw.use_read_committed TO off;
SELECT * FROM ft1, ft2;
 c1 | c1 
----+----
(0 rows)

SET postgres_fdw.use_read_committed TO on;
SELECT * FROM ft1, ft2;
ERROR:  could not initiate multiple foreign scans in a single query
DETAIL:  Multiple foreign scans are not allowed in a single query when using read committed level for remote transactions to maintain consistency.
HINT:  Disable postgres_fdw.use_read_committed or modify query to perform only a single foreign scan.
BEGIN;
SELECT * FROM ft1;
 c1 
----
(0 rows)

SET postgres_fdw.use_read_committed TO off;
SELECT * FROM ft1 WHERE c1 IN (SELECT c1 FROM ft1);
ERROR:  could not initiate multiple foreign scans in a single query
DETAIL:  Multiple foreign scans are not allowed in a single query when using read committed level for remote transactions to maintain consistency.
HINT:  Disable postgres_fdw.use_read_committed or modify query to perform only a single foreign scan.
COMMIT;
-- ===================================================================
-- Test two phase commit
-- ===================================================================
SET postgres_fdw.two_phase_commit TO true;
-- COMMIT command on local transaction causes foreign transactions to
-- be committed via two phase commit protocol.
BEGIN;
INSERT INTO t0 VALUES (100);
INSERT INTO ft1 VALUES (100);
INSERT INTO ft2 VALUES (100);
COMMIT;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
       split_part       
------------------------
 COMMIT PREPARED 'pgfdw
 COMMIT PREPARED 'pgfdw
(2 rows)

SELECT * FROM pg_prepared_xacts;
 transaction | gid | prepared | owner | database 
-------------+-----+----------+-------+----------
(0 rows)

BEGIN;
SET LOCAL postgres_fdw.use_read_committed TO off;
SELECT count(*) FROM ftv WHERE c1 = 100;
 count 
-------
     3
(1 row)

COMMIT;
SELECT array_length(umids, 1) FROM pgfdw_plus.xact_commits ORDER BY fxid;
 array_length 
--------------
            2
            2
(2 rows)

-- ROLLBACK command on local transaction causes foreign transactions to
-- be rollbacked without using two phase commit protocol.
BEGIN;
INSERT INTO t0 VALUES (110);
INSERT INTO ft1 VALUES (110);
INSERT INTO ft2 VALUES (110);
ROLLBACK;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
   split_part   
----------------
 DEALLOCATE ALL
 DEALLOCATE ALL
(2 rows)

SELECT * FROM pg_prepared_xacts;
 transaction | gid | prepared | owner | database 
-------------+-----+----------+-------+----------
(0 rows)

BEGIN;
SET LOCAL postgres_fdw.use_read_committed TO off;
SELECT count(*) FROM ftv WHERE c1 = 110;
 count 
-------
     0
(1 row)

COMMIT;
SELECT array_length(umids, 1) FROM pgfdw_plus.xact_commits ORDER BY fxid;
 array_length 
--------------
            2
            2
            2
(3 rows)

-- Failure of prepare phase on one of foreign servers causes
-- all transactions to be rollbacked.
BEGIN;
INSERT INTO t0 VALUES (120);
INSERT INTO ft1 VALUES (120);
INSERT INTO ft2 VALUES (120);
SELECT pg_terminate_backend(pid, 10000) FROM pg_stat_activity
    WHERE application_name = 'pgfdw_plus_loopback1';
 pg_terminate_backend 
----------------------
 t
(1 row)

COMMIT;
ERROR:  FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
   split_part   
----------------
 DEALLOCATE ALL
(1 row)

SELECT * FROM pg_prepared_xacts;
 transaction | gid | prepared | owner | database 
-------------+-----+----------+-------+----------
(0 rows)

BEGIN;
SET LOCAL postgres_fdw.use_read_committed TO off;
SELECT count(*) FROM ftv WHERE c1 = 120;
 count 
-------
     0
(1 row)

COMMIT;
SELECT array_length(umids, 1) FROM pgfdw_plus.xact_commits ORDER BY fxid;
 array_length 
--------------
            2
            2
            2
            2
(4 rows)

-- Failure of prepare phase on the other foreign server causes
-- all transactions to be rollbacked.
BEGIN;
INSERT INTO t0 VALUES (130);
INSERT INTO ft1 VALUES (130);
INSERT INTO ft2 VALUES (130);
SELECT pg_terminate_backend(pid, 10000) FROM pg_stat_activity
    WHERE application_name = 'pgfdw_plus_loopback2';
 pg_terminate_backend 
----------------------
 t
(1 row)

COMMIT;
ERROR:  FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
   split_part   
----------------
 DEALLOCATE ALL
(1 row)

SELECT * FROM pg_prepared_xacts;
 transaction | gid | prepared | owner | database 
-------------+-----+----------+-------+----------
(0 rows)

BEGIN;
SET LOCAL postgres_fdw.use_read_committed TO off;
SELECT count(*) FROM ftv WHERE c1 = 130;
 count 
-------
     0
(1 row)

COMMIT;
SELECT array_length(umids, 1) FROM pgfdw_plus.xact_commits ORDER BY fxid;
 array_length 
--------------
            2
            2
            2
            2
            2
(5 rows)

-- two_phase_commit = on causes even read-only foreign transactions
-- to be committed via two phase commit protocol.
SET postgres_fdw.two_phase_commit TO on;
BEGIN;
SELECT count(*) FROM t0;
 count 
-------
     1
(1 row)

SELECT count(*) FROM ft1;
 count 
-------
     1
(1 row)

SELECT count(*) FROM ft2;
 count 
-------
     1
(1 row)

COMMIT;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
       split_part       
------------------------
 COMMIT PREPARED 'pgfdw
 COMMIT PREPARED 'pgfdw
(2 rows)

SELECT * FROM pg_prepared_xacts;
 transaction | gid | prepared | owner | database 
-------------+-----+----------+-------+----------
(0 rows)

SELECT array_length(umids, 1) FROM pgfdw_plus.xact_commits ORDER BY fxid;
 array_length 
--------------
            2
            2
            2
            2
            2
            2
(6 rows)

-- ===================================================================
-- Test error cases of pgfdw_plus_foreign_prepared_xacts and
-- pgfdw_plus_resolve_foreign_prepared_xacts
-- ===================================================================
-- Should fail because specified server doesn't exist.
SELECT * FROM pgfdw_plus_foreign_prepared_xacts('nonexistent');
ERROR:  user mapping for server "nonexistent" and user "regress_pgfdw_local_super1" not found
SELECT * FROM pgfdw_plus_resolve_foreign_prepared_xacts('nonexistent');
ERROR:  user mapping for server "nonexistent" and user "regress_pgfdw_local_super1" not found
-- Should fail because there is no user mapping for specified server and
-- current user.
SET ROLE regress_pgfdw_local_super2;
SELECT * FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback2');
ERROR:  user mapping for server "pgfdw_plus_loopback2" and user "regress_pgfdw_local_super2" not found
SELECT * FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_loopback2');
ERROR:  user mapping for server "pgfdw_plus_loopback2" and user "regress_pgfdw_local_super2" not found
SET ROLE regress_pgfdw_local_super1;
-- Should fail because foreign data wrapper of specified server
-- is not postgres_fdw.
SELECT * FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_dummy_server');
ERROR:  foreign data wrapper of specified server must be "postgres_fdw"
SELECT * FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_dummy_server');
ERROR:  foreign data wrapper of specified server must be "postgres_fdw"
-- Should fail because dblink has not been installed yet.
SELECT * FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback1');
ERROR:  extension "dblink" must be installed
SELECT * FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_loopback1');
ERROR:  extension "dblink" must be installed
-- ===================================================================
-- Test functions to resolve foreign prepared transactions
-- ===================================================================
CREATE EXTENSION dblink;
-- These functions should return 0 rows because there are no foreign
-- prepared transactions.
SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_loopback1');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_loopback2');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
 count 
-------
     0
(1 row)

-- xact_commits should be emptied because there are no foreign
-- prepared transactions.
SELECT count(*) FROM pgfdw_plus.xact_commits;
 count 
-------
     6
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
 count 
-------
     6
(1 row)

SELECT count(*) FROM pgfdw_plus.xact_commits;
 count 
-------
     0
(1 row)

-- Enable skip_commit_phase to create foreign prepared transactions.
-- Note that more than two foreign prepared transactions cannot be created
-- because max_prepared_xacts is set to 2 in regression test.
SET postgres_fdw.skip_commit_phase TO true;
BEGIN;
INSERT INTO ft1 VALUES (200);
INSERT INTO ft2 VALUES (200);
COMMIT;
SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback1');
 count 
-------
     1
(1 row)

SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback2');
 count 
-------
     1
(1 row)

SELECT count(*) FROM pgfdw_plus.xact_commits;
 count 
-------
     1
(1 row)

-- Resolve foreign prepared transactions on only one of servers.
SELECT status, count(*)
  FROM pgfdw_plus_resolve_foreign_prepared_xacts('pgfdw_plus_loopback1')
  GROUP BY status ORDER BY status;
  status   | count 
-----------+-------
 committed |     1
(1 row)

SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback1');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback2');
 count 
-------
     1
(1 row)

-- xact_commits still should have one row referencing to foreign prepared
-- transactions on the other server.
SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus.xact_commits;
 count 
-------
     1
(1 row)

-- Create one foreign prepared transaction that should be rollbacked
-- so as to test later whether pgfdw_plus_resolve_foreign_prepared_xacts_all()
-- can actually rollback it.
BEGIN;
INSERT INTO ft1 VALUES (210);
INSERT INTO ft2 VALUES (210);
SELECT pg_terminate_backend(pid, 10000) FROM pg_stat_activity
    WHERE application_name = 'pgfdw_plus_loopback2';
 pg_terminate_backend 
----------------------
 t
(1 row)

COMMIT;
ERROR:  FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-- All foreign prepared transactions are resolved and xact_commits
-- should be empty.
SELECT status, count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all()
  GROUP BY status ORDER BY status;
  status   | count 
-----------+-------
 aborted   |     1
 committed |     1
(2 rows)

SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback1');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_foreign_prepared_xacts('pgfdw_plus_loopback2');
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
 count 
-------
     1
(1 row)

SELECT count(*) FROM pgfdw_plus.xact_commits;
 count 
-------
     0
(1 row)

-- Should fail because pgfdw_plus_vacuum_xact_commits() cannot be executed
-- in read-only transaction.
BEGIN READ ONLY;
SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
ERROR:  cannot execute pgfdw_plus_vacuum_xact_commits() in a read-only transaction
COMMIT;
-- ===================================================================
-- Test that DEALLOCATE ALL is executed properly even when
-- two_phase_commit is on or prepare.
-- ===================================================================
-- DEALLOCATE ALL should follow COMMIT PREPARED because
-- a subtransaction is aborted.
SET postgres_fdw.skip_commit_phase TO false;
BEGIN;
SAVEPOINT s;
INSERT INTO ft1 VALUES (300);
INSERT INTO ft2 VALUES (300);
ROLLBACK TO SAVEPOINT s;
COMMIT;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
   split_part   
----------------
 DEALLOCATE ALL
 DEALLOCATE ALL
(2 rows)

-- DEALLOCATE ALL should follow PREPARE TRANSACTION
-- if a subtransaction is aborted and skip_commit_phase is enabled.
SET postgres_fdw.skip_commit_phase TO true;
BEGIN;
SAVEPOINT s;
INSERT INTO ft1 VALUES (310);
INSERT INTO ft2 VALUES (310);
ROLLBACK TO SAVEPOINT s;
COMMIT;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
   split_part   
----------------
 DEALLOCATE ALL
 DEALLOCATE ALL
(2 rows)

SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
 count 
-------
     2
(1 row)

-- DEALLOCATE ALL should not run because a subtransaction is not aborted.
BEGIN;
SAVEPOINT s;
INSERT INTO ft1 VALUES (320);
INSERT INTO ft2 VALUES (320);
COMMIT;
SELECT split_part(query, '_', 1) FROM pg_stat_activity
    WHERE application_name LIKE 'pgfdw_plus_loopback%' ORDER BY query;
         split_part         
----------------------------
 PREPARE TRANSACTION 'pgfdw
 PREPARE TRANSACTION 'pgfdw
(2 rows)

SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
 count 
-------
     2
(1 row)

-- ===================================================================
-- Test functions executed by non-superusers
-- ===================================================================
CREATE ROLE regress_pgfdw_local_normal1 NOSUPERUSER;
CREATE ROLE regress_pgfdw_local_normal2 NOSUPERUSER;
CREATE ROLE regress_pgfdw_local_normal3 NOSUPERUSER;
CREATE ROLE regress_pgfdw_local_normal4 NOSUPERUSER;
CREATE ROLE regress_pgfdw_remote_normal1 NOSUPERUSER LOGIN;
CREATE USER MAPPING FOR regress_pgfdw_local_normal1 SERVER pgfdw_plus_loopback1
  OPTIONS (user 'regress_pgfdw_remote_normal1');
GRANT regress_pgfdw_local_normal1 TO regress_pgfdw_local_normal2;
GRANT regress_pgfdw_local_normal2 TO regress_pgfdw_local_normal3;
-- Grant privileges on schema regress_pgfdw_plus so to non-superusers
-- so that they can use dblink installed in it.
GRANT ALL ON SCHEMA regress_pgfdw_plus TO regress_pgfdw_local_normal1;
GRANT ALL ON SCHEMA regress_pgfdw_plus TO regress_pgfdw_local_normal4;
-- Allow these non-superusers to use server pgfdw_plus_loopback1.
GRANT ALL ON FOREIGN SERVER pgfdw_plus_loopback1 TO regress_pgfdw_local_normal1;
GRANT ALL ON FOREIGN SERVER pgfdw_plus_loopback1 TO regress_pgfdw_local_normal4;
-- Allow these non-superusers to read and write xact_commits in
-- pgfdw_plus_vacuum_xact_commits().
GRANT ALL ON SCHEMA pgfdw_plus TO regress_pgfdw_local_normal1;
GRANT ALL ON TABLE pgfdw_plus.xact_commits TO regress_pgfdw_local_normal1;
GRANT ALL ON SCHEMA pgfdw_plus TO regress_pgfdw_local_normal4;
GRANT ALL ON TABLE pgfdw_plus.xact_commits TO regress_pgfdw_local_normal4;
-- Server with user mapping for superuser or public should be skipped,
-- but that for regress_pgfdw_local_normal1 not.
SET ROLE regress_pgfdw_local_normal1;
SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
NOTICE:  skipping server "pgfdw_plus_loopback1" with user mapping for "public"
NOTICE:  could not resolve foreign prepared transactions on server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
NOTICE:  skipping server "pgfdw_plus_loopback1" with user mapping for "public"
NOTICE:  could not retrieve minimum full transaction ID from server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

-- Server with user mapping for superuser should be skipped, but that
-- for public or regress_pgfdw_local_normal1 not. Because
-- regress_pgfdw_local_normal3 can use public mapping and has indirect
-- membership in regress_pgfdw_local_normal1.
SET ROLE regress_pgfdw_local_normal3;
SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
NOTICE:  could not resolve foreign prepared transactions on server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  could not resolve foreign prepared transactions on server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
NOTICE:  could not retrieve minimum full transaction ID from server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  could not retrieve minimum full transaction ID from server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

-- Server with user mapping for superuser or regress_pgfdw_local_normal1
-- should be skipped, but that for public not. Because regress_pgfdw_local_normal4
-- can use public mapping but has no membership in regress_pgfdw_local_normal1.
SET ROLE regress_pgfdw_local_normal4;
SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
NOTICE:  could not resolve foreign prepared transactions on server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback1" with user mapping for "regress_pgfdw_local_normal1"
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
NOTICE:  could not retrieve minimum full transaction ID from server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
NOTICE:  skipping server "pgfdw_plus_loopback1" with user mapping for "regress_pgfdw_local_normal1"
NOTICE:  skipping server "pgfdw_plus_loopback2" with user mapping for "regress_pgfdw_local_super1"
 count 
-------
     0
(1 row)

-- No server should be skipped because current user is superuser and
-- also can be set to user who can use public mapping.
SET ROLE regress_pgfdw_local_super1;
SELECT count(*) FROM pgfdw_plus_resolve_foreign_prepared_xacts_all();
NOTICE:  could not resolve foreign prepared transactions on server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
 count 
-------
     0
(1 row)

SELECT count(*) FROM pgfdw_plus_vacuum_xact_commits();
NOTICE:  could not retrieve minimum full transaction ID from server "pgfdw_plus_loopback1"
DETAIL:  Error message: password or GSSAPI delegated credentials required
 count 
-------
     3
(1 row)

-- ===================================================================
-- Reset global settings
-- ===================================================================
RESET postgres_fdw.two_phase_commit;
RESET debug_discard_caches;
-- ===================================================================
-- Cleanup
-- ===================================================================
RESET ROLE;
DROP OWNED BY regress_pgfdw_local_super1 CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to user mapping for public on server pgfdw_plus_loopback1
drop cascades to user mapping for regress_pgfdw_local_normal1 on server pgfdw_plus_loopback1
drop cascades to user mapping for public on server pgfdw_plus_dummy_server
DROP OWNED BY regress_pgfdw_local_super2 CASCADE;
DROP OWNED BY regress_pgfdw_remote_super1 CASCADE;
DROP OWNED BY regress_pgfdw_remote_super2 CASCADE;
DROP OWNED BY regress_pgfdw_local_normal1 CASCADE;
DROP OWNED BY regress_pgfdw_local_normal2 CASCADE;
DROP OWNED BY regress_pgfdw_local_normal3 CASCADE;
DROP OWNED BY regress_pgfdw_local_normal4 CASCADE;
DROP OWNED BY regress_pgfdw_remote_normal1 CASCADE;
DROP ROLE regress_pgfdw_local_super1;
DROP ROLE regress_pgfdw_local_super2;
DROP ROLE regress_pgfdw_remote_super1;
DROP ROLE regress_pgfdw_remote_super2;
DROP ROLE regress_pgfdw_local_normal1;
DROP ROLE regress_pgfdw_local_normal2;
DROP ROLE regress_pgfdw_local_normal3;
DROP ROLE regress_pgfdw_local_normal4;
DROP ROLE regress_pgfdw_remote_normal1;
\unset SHOW_CONTEXT
